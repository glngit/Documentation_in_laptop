project:
------------
stage.1: git clone, Normal way

stage.2: maven installation using global tool configuration:
            jenkins, manage jenkins, global tool configuration, maven: Add Maven ---> name:Maven-3.6.1, install automatically, version:3.6.1, Apply, save
              -->go to job, configure, pipeline----- write commands [def--means variable setting]    
           ################# It will download maven from maven repository in background
stage.3: Docker build:
           Docker file is already available in github, in the same repo, It is useful for image creation 
              ################ [Here using tomcat as base image, /user/local/tomcat---
                -->here, tomcat will extract, so. inside this .jar[(java app artifact) copying] -----> finally by using these Docker image will create.
                  ---> Here, tag becomes build number in jenkins(build now)
stage.4: Docker login & push:
               password:Creating secret,--- click on pipeline syntax - below--->script in pipeline,---- simple step:withcredentials, bindins:add---secret text,variable:DockerHubPwd,  ---- credentials, add---jenkins,
                   ,, kind:secret text, secret:(type) docker hub password, ID:Any give(DockerHubPwd), Description:Docker Hub Password, add,---- generate pipeline script (copy and paste in pipeline script, add some text)
                ---> If using private repo---- sh "docker login -u dockergln -p ${DockerHubPwd}  ipadress of private repo:port no where docker repo is created"
                                                                                                                         -------or--------
                                                                                                                           Dns name  ( mithuntech.com)
stage.5:Deploying in Deployment server:
           installing ssh plugin: -- manage jenkins, manage plugin, available-ssh agent, install without restart.
            ----> click on pipeline syntax---- simple step:sshagent, add--jenkins,, kind:ssh username withprivate key,  ID: Docker_Dev_server_SSH, username:ubuntu, privatekey: add--past .pem data, add,, select un=buntu, genetate--(copy & paste in stage) 
                 ##########use publicip or private ip( if in same vpc) in ssh stage,, javawevappcontainer(container name given)
                 ########## docker rm -f javawebappcontainer(if container already exist delete it), then after create container
                  ###### deployment server ip:8080  &   --/java-web-app [application contex]
Pipeline Script:
----------------
___________________________________________________

node{
    
    def buildnumber = BUILD_NUMBER
    stage("Git Clone"){
        git url: 'https://github.com/MithunTechnologiesDevOps/java-web-app-docker.git', branch: 'master'
    }
    stage("Maven Clen Package"){
        def mavenHome= tool name: "Maven", type: "maven"
        sh "${mavenHome}/bin/mvn clean  package"
    }
    stage("Build Docker Image"){
        sh "docker build -t dockergln/java-web-app-docker:${buildnumber} . "
    }
    stage("Docker Login And Push"){
        withCredentials([string(credentialsId: 'dockerid', variable: 'Docker')]) {
          sh "docker login -u dockergln -p ${Docker}"
        }
        sh "docker push dockergln/java-web-app-docker:${buildnumber}"
    }
    stage("Deploy Application As Docker Container In Docker Deployment Server"){
        sshagent(['Docker_Dev_Server_SSH']) {
       sh "ssh -o StrictHostKeychecking=no ubuntu@54.78.147.55 docker rm -f javawebappcontainer || true"
        sh "ssh -o StrictHostKeychecking=no ubuntu@54.78.147.55 docker run -d -p 8080:8080 --name javawebappcontainer dockergln/java-web-app-docker:${buildnumber}"
        
     }
    } 
}
